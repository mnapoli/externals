#!/usr/bin/env php
<?php
declare(strict_types = 1);

use Doctrine\DBAL\Connection;
use Externals\Application\Command\DbCommand;
use Externals\Email\EmailContentParser;
use Externals\Email\EmailRepository;
use Externals\EmailSynchronizer;
use Externals\NotFound;
use Psr\Container\ContainerInterface;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use React\Http\Server;
use Stratify\Framework\Application;
use Symfony\Bridge\Monolog\Handler\ConsoleHandler;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;
use ZBateson\MailMimeParser\MailMimeParser;

/** @var Application $application */
$application = require __DIR__ . '/res/bootstrap.php';

$cli = $application->cli();

$cli->command('serve', function (\Stratify\Http\Application $http, ContainerInterface $container, OutputInterface $output) {
    $loop = React\EventLoop\Factory::create();

    $db = $container->get(Connection::class);

    $server = new Server(function (ServerRequestInterface $request) use ($http, $db) : ResponseInterface {
        // Reset the DB connection
        $db->close();
        return $http->handle($request);
    });
    $server->listen(new React\Socket\Server($container->get('http.port'), $loop));
    $server->on('error', function (Exception $e) use ($output) {
        $output->writeln("<error>Error: {$e->getMessage()}</error>");
        if ($e->getPrevious() !== null) {
            $e = $e->getPrevious();
            $output->writeln("<error>Caused by: {$e->getMessage()}</error>");
        }
        $output->writeln($e->getTraceAsString());
    });

    $loop->run();
});

$cli->command('db [--force]', [DbCommand::class, 'setup']);
$cli->command('db-purge [--force]', [DbCommand::class, 'purge']);
$cli->command('db-truncate [--force]', [DbCommand::class, 'truncate']);

$cli->command('sync [max]', function (int $max = null, EmailSynchronizer $synchronizer, OutputInterface $output) {
    $start = microtime(true);
    $synchronizer->synchronize($max);
    $time = microtime(true) - $start;
    $output->writeln("<comment>Emails have been synchronized in $time seconds</comment>");
});

$cli->command('refresh-threads', function (EmailRepository $repository, OutputInterface $output) {
    $start = microtime(true);
    $repository->refreshThreads();
    $time = microtime(true) - $start;
    $output->writeln("<comment>Threads have been refreshed in $time seconds</comment>");
});

$cli->command('reparse', function (EmailRepository $repository, EmailContentParser $parser, OutputInterface $output) {
    $start = microtime(true);
    $maxNumber = $repository->getLastEmailNumber();
    for ($number = $maxNumber; $number > 0; $number--) { // from most recent to first
        try {
            $email = $repository->getByNumber($number);
        } catch (NotFound $e) {
            continue;
        }
        $parsedDocument = (new MailMimeParser)->parse($email->getSource());
        $content = $parser->parse((string) $parsedDocument->getTextContent());
        $repository->updateContent($email->getId(), $content);
        $output->writeln("<info>Updated email {$number}</info>");
    }
    $time = microtime(true) - $start;
    $output->writeln("<comment>Emails have been reparsed in $time seconds</comment>");
});

$cli->command('container:get id', function (string $id, ContainerInterface $container) {
    var_dump($container->get($id));
});

$output = new ConsoleOutput();
$application->getContainer()->get(ConsoleHandler::class)->setOutput($output);
$cli->run(null, $output);
